import { Relationship } from './relationship';
export class ModelFactory {
    static make(model, data) {
        return new model().deserialize(data);
    }
    static makeFromArray(model, array) {
        let models = [];
        for (let ii = 0; ii < array.length; ++ii) {
            models.push(new model().deserialize(array[ii]));
        }
        return models;
    }
    static makeRelated(model, related, key) {
        let relationshipConfig = model.getRelationship(key);
        let relationship = new Relationship(model, related, relationshipConfig.type);
        model[key] = relationship.create();
        model.setUri(model[key].getSelfUri() + '/' + model.getUri());
        return model;
    }
    static makeRelatedFromRelationship(relationship, input) {
        if (relationship.type == 'hasOne' || relationship.type == 'belongsTo') {
            return relationship.create().deserialize(input);
        }
        else if (relationship.type == 'hasMany') {
            const related = relationship.getRelated();
            // let constructor = Models.get(related.key);
            return ModelFactory.makeFromArray(related, input);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3BldGVjaC9uZ3gtcmVzdC1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvbW9kZWwuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHOUMsTUFBTSxPQUFPLFlBQVk7SUFFckIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSTtRQUNuQixPQUFPLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLO1FBQzdCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixLQUFJLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUc7UUFDbEMsSUFBSSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXBELElBQUksWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVuQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFN0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsS0FBSztRQUNsRCxJQUFHLFlBQVksQ0FBQyxJQUFJLElBQUksUUFBUSxJQUFJLFlBQVksQ0FBQyxJQUFJLElBQUksV0FBVyxFQUFFO1lBQ2xFLE9BQU8sWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUcsWUFBWSxDQUFDLElBQUksSUFBSSxTQUFTLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzFDLDZDQUE2QztZQUM3QyxPQUFPLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO0lBRUwsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVsYXRpb25zaGlwIH0gZnJvbSAnLi9yZWxhdGlvbnNoaXAnO1xuaW1wb3J0IHsgTW9kZWxzIH0gZnJvbSBcIi4vbW9kZWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBNb2RlbEZhY3Rvcnkge1xuXG4gICAgc3RhdGljIG1ha2UobW9kZWwsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBtb2RlbCgpLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYWtlRnJvbUFycmF5KG1vZGVsLCBhcnJheSkge1xuICAgICAgICBsZXQgbW9kZWxzID0gW107XG4gICAgICAgIGZvcihsZXQgaWkgPSAwOyBpaSA8IGFycmF5Lmxlbmd0aDsgKytpaSkge1xuICAgICAgICAgICAgbW9kZWxzLnB1c2gobmV3IG1vZGVsKCkuZGVzZXJpYWxpemUoYXJyYXlbaWldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVscztcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZVJlbGF0ZWQobW9kZWwsIHJlbGF0ZWQsIGtleSkge1xuICAgICAgICBsZXQgcmVsYXRpb25zaGlwQ29uZmlnID0gbW9kZWwuZ2V0UmVsYXRpb25zaGlwKGtleSk7XG5cbiAgICAgICAgbGV0IHJlbGF0aW9uc2hpcCA9IG5ldyBSZWxhdGlvbnNoaXAobW9kZWwsIHJlbGF0ZWQsIHJlbGF0aW9uc2hpcENvbmZpZy50eXBlKTtcblxuICAgICAgICBtb2RlbFtrZXldID0gcmVsYXRpb25zaGlwLmNyZWF0ZSgpO1xuXG4gICAgICAgIG1vZGVsLnNldFVyaShtb2RlbFtrZXldLmdldFNlbGZVcmkoKSArICcvJyArIG1vZGVsLmdldFVyaSgpKTtcblxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VSZWxhdGVkRnJvbVJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXAsIGlucHV0KSB7XG4gICAgICAgIGlmKHJlbGF0aW9uc2hpcC50eXBlID09ICdoYXNPbmUnIHx8IHJlbGF0aW9uc2hpcC50eXBlID09ICdiZWxvbmdzVG8nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVsYXRpb25zaGlwLmNyZWF0ZSgpLmRlc2VyaWFsaXplKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIGlmKHJlbGF0aW9uc2hpcC50eXBlID09ICdoYXNNYW55Jykge1xuICAgICAgICAgICAgY29uc3QgcmVsYXRlZCA9IHJlbGF0aW9uc2hpcC5nZXRSZWxhdGVkKCk7XG4gICAgICAgICAgICAvLyBsZXQgY29uc3RydWN0b3IgPSBNb2RlbHMuZ2V0KHJlbGF0ZWQua2V5KTtcbiAgICAgICAgICAgIHJldHVybiBNb2RlbEZhY3RvcnkubWFrZUZyb21BcnJheShyZWxhdGVkLCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufSJdfQ==