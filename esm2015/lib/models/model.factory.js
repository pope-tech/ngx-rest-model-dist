import { Relationship } from './relationship';
export class ModelFactory {
    static make(model, data) {
        return new model().deserialize(data);
    }
    static makeFromArray(model, array) {
        let models = [];
        for (let ii = 0; ii < array.length; ++ii) {
            models.push(new model().deserialize(array[ii]));
        }
        return models;
    }
    static makeRelated(model, related, key) {
        let relationshipConfig = model.getRelationship(key);
        let relationship = new Relationship(model, related, relationshipConfig.type);
        model[key] = relationship.create();
        model.setUri(model[key].getSelfUri() + '/' + model.getUri());
        return model;
    }
    static makeRelatedFromRelationship(relationship, input) {
        if (relationship.type == 'hasOne' || relationship.type == 'belongsTo') {
            return relationship.create().deserialize(input);
        }
        else if (relationship.type == 'hasMany') {
            const related = relationship.getRelated();
            // let constructor = Models.get(related.key);
            return ModelFactory.makeFromArray(related, input);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcmVzdC1tb2RlbC9zcmMvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL21vZGVsLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzlDLE1BQU0sT0FBTyxZQUFZO0lBRXJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUk7UUFDbkIsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSztRQUM3QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHO1FBQ2xDLElBQUksa0JBQWtCLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVwRCxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFbkMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRTdELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNLENBQUMsMkJBQTJCLENBQUMsWUFBWSxFQUFFLEtBQUs7UUFDbEQsSUFBRyxZQUFZLENBQUMsSUFBSSxJQUFJLFFBQVEsSUFBSSxZQUFZLENBQUMsSUFBSSxJQUFJLFdBQVcsRUFBRTtZQUNsRSxPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkQ7YUFBTSxJQUFHLFlBQVksQ0FBQyxJQUFJLElBQUksU0FBUyxFQUFFO1lBQ3RDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQyw2Q0FBNkM7WUFDN0MsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNyRDtJQUVMLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbGF0aW9uc2hpcCB9IGZyb20gJy4vcmVsYXRpb25zaGlwJztcbmltcG9ydCB7IE1vZGVscyB9IGZyb20gXCIuL21vZGVsc1wiO1xuXG5leHBvcnQgY2xhc3MgTW9kZWxGYWN0b3J5IHtcblxuICAgIHN0YXRpYyBtYWtlKG1vZGVsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgbW9kZWwoKS5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZUZyb21BcnJheShtb2RlbCwgYXJyYXkpIHtcbiAgICAgICAgbGV0IG1vZGVscyA9IFtdO1xuICAgICAgICBmb3IobGV0IGlpID0gMDsgaWkgPCBhcnJheS5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgICAgIG1vZGVscy5wdXNoKG5ldyBtb2RlbCgpLmRlc2VyaWFsaXplKGFycmF5W2lpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VSZWxhdGVkKG1vZGVsLCByZWxhdGVkLCBrZXkpIHtcbiAgICAgICAgbGV0IHJlbGF0aW9uc2hpcENvbmZpZyA9IG1vZGVsLmdldFJlbGF0aW9uc2hpcChrZXkpO1xuXG4gICAgICAgIGxldCByZWxhdGlvbnNoaXAgPSBuZXcgUmVsYXRpb25zaGlwKG1vZGVsLCByZWxhdGVkLCByZWxhdGlvbnNoaXBDb25maWcudHlwZSk7XG5cbiAgICAgICAgbW9kZWxba2V5XSA9IHJlbGF0aW9uc2hpcC5jcmVhdGUoKTtcblxuICAgICAgICBtb2RlbC5zZXRVcmkobW9kZWxba2V5XS5nZXRTZWxmVXJpKCkgKyAnLycgKyBtb2RlbC5nZXRVcmkoKSk7XG5cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYWtlUmVsYXRlZEZyb21SZWxhdGlvbnNoaXAocmVsYXRpb25zaGlwLCBpbnB1dCkge1xuICAgICAgICBpZihyZWxhdGlvbnNoaXAudHlwZSA9PSAnaGFzT25lJyB8fCByZWxhdGlvbnNoaXAudHlwZSA9PSAnYmVsb25nc1RvJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbGF0aW9uc2hpcC5jcmVhdGUoKS5kZXNlcmlhbGl6ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSBpZihyZWxhdGlvbnNoaXAudHlwZSA9PSAnaGFzTWFueScpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0ZWQgPSByZWxhdGlvbnNoaXAuZ2V0UmVsYXRlZCgpO1xuICAgICAgICAgICAgLy8gbGV0IGNvbnN0cnVjdG9yID0gTW9kZWxzLmdldChyZWxhdGVkLmtleSk7XG4gICAgICAgICAgICByZXR1cm4gTW9kZWxGYWN0b3J5Lm1ha2VGcm9tQXJyYXkocmVsYXRlZCwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0iXX0=