{"version":3,"file":"api.service.d.ts","sources":["../../../../projects/ngx-rest-model/src/lib/http/api.service.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;;AAIlC,qBACa,UAAU;AACvB,IACI,OAAO,CAAC,OAAO,CAAS;AAC5B,IAAI,OAAO,CAAC,OAAO,CAAS;AAC5B,IAAI,OAAO,CAAC,IAAI,CAAa;AAC7B,gBACgB,IAAI,EAAE,UAAU,EAAkB,MAAM,KAAA;AAAG,IAQhD,UAAU,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;AAAE,IAI/B,UAAU;AACd,IAGI,UAAU,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;AAAE,IAI/B,UAAU;AACd,IAGH,OAAO,CAAC,MAAM;AAAE,IAQT,GAAG,CAAC,GAAG,KAAA,EAAE,OAAO,KAAK,EAAE,YAAY,UAAQ,GAAG,GAAG;AAAE,IASnD,IAAI,CAAC,GAAG,KAAA,EAAE,OAAO,KAAA,EAAE,YAAY,UAAQ,EAAE,OAAO,KAAK,GAAG,GAAG;AAAE,IAW7D,GAAG,CAAC,GAAG,KAAA,EAAE,OAAO,KAAA,EAAE,YAAY,UAAQ;AAC9B,IAKR,MAAM,CAAC,GAAG,KAAA,EAAE,OAAO,KAAK,EAAE,YAAY,UAAQ;;;AACtC,CAIlB;AACD","sourcesContent":["import {Inject, Injectable} from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { take } from \"rxjs/operators\";\nimport { CONFIG } from '../constants';\n\n@Injectable()\nexport class ApiService {\n\n    private baseUrl: string;\n    private apiRoot: string;\n    private http: HttpClient;\n\n    constructor(http: HttpClient, @Inject(CONFIG) config) {\n        this.http = http;\n        const root = config.api_root;\n\n        this.setBaseUrl(root);\n        this.setApiRoot(root);\n    }\n\n    public setBaseUrl(url: string): void {\n        this.baseUrl = url;\n    }\n\n    public getBaseUrl() {\n        return this.baseUrl;\n    }\n\n    public setApiRoot(url: string): void {\n        this.apiRoot = url;\n    }\n\n    public getApiRoot() {\n        return this.apiRoot;\n    }\n\n    private getUrl(uri, bypassPrefix = false) {\n        if( ! bypassPrefix) {\n            return this.getBaseUrl() + '/' + uri;\n        }\n\n        return this.getApiRoot() + '/' + uri;\n    }\n\n    public get(uri, options = {}, bypassPrefix = false): any {\n        let url = this.getUrl(uri, bypassPrefix);\n        if(options != {}) {\n            return this.http.get(url, options).pipe(take(1));\n        }\n\n        return this.http.get(url).pipe(take(1));\n    }\n\n    public post(uri, payload, bypassPrefix = false, options = {}): any {\n\n        let url = this.getUrl(uri, bypassPrefix);\n\n        if(options != {}) {\n            return this.http.post(url, payload, options).pipe(take(1));\n        }\n\n        return this.http.post(url, payload).pipe(take(1));\n    }\n\n    public put(uri, payload, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.put(url, payload).pipe(take(1));\n    }\n\n    public delete(uri, options = {}, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.delete(url).pipe(take(1));\n    }\n}\n"]}