{"version":3,"file":"backend.service.d.ts","sources":["../../../../projects/ngx-rest-model/src/lib/http/backend.service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAI3C,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;;AAElC,qBACa,cAAc;AAC3B,IAIgB,SAAS,CAAC,GAAG,EAAE,UAAU;AAAE,IAFvC,SAAS,CAAC,KAAK,MAAC;AACpB,gBAC0B,GAAG,EAAE,UAAU;AAAG,IAIxC,QAAQ,CAAC,KAAK,KAAA;AACb,IAGD,IAAI,CAAC,EAAE,KAAA;AACP,IAOA,IAAI,CAAC,IAAI,KAAA;AACT,IAMA,MAAM,CAAC,IAAI,KAAA;AACI,IAIf,SAAS,CAAC,IAAI,KAAA;AACd,IAIA,OAAO,CAAC,IAAI,KAAA;AACG,IAGf,GAAG,CAAC,KAAK,MAAO,EAAE,OAAO,GAAE,GAAiB;AAG9C,IAyBE,UAAU,CAAC,OAAO,KAAA,EAAE,GAAG,KAAA,EAAE,KAAK,MAAO,EAAE,OAAO,KAAK;;;AACnD,CAUH;AACD","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpParams} from \"@angular/common/http\";\n\nimport { ApiService } from './api.service';\nimport { ModelFactory } from '../models/model.factory';\nimport { Models } from \"../models/models\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class BackendService {\n\n\n    protected model;\n\n    constructor(protected api: ApiService) {\n    }\n\n    // set model\n    setModel(model) {\n        this.model = model;\n    }\n\n    find(id) {\n        let constructor = Models.get(this.model.key);\n        return this.api.get(new constructor().getUri() + '/' + id).pipe(map((client: any) => {\n            client.data = ModelFactory.make(Models.get(this.model.key), client.data);\n            return client;\n        }));\n    }\n\n    save(data) {\n        if(data[data.getKey()]) {\n            return this.update(data);\n        }\n        return this.createNew(data);\n    }\n\n    update(data) {\n        let payload = data.serialize();\n        return this.api.put(data.getUri() + '/' + data[data.getKey()], payload);\n    }\n\n    createNew(data) {\n        let payload = data.serialize();\n        return this.api.post(data.getUri(), payload);\n    }\n\n    destroy(data) {\n        return this.api.delete(data.getUri() + '/' + data[data.getKey()]);\n    }\n\n    get(model = null, options: any = { page: 1 }) {\n\n\n        let requestOptions: any = {\n            params: new HttpParams()\n        };\n\n        if(options.page != 1) {\n            requestOptions.params = new HttpParams().set('page', String(options.page));\n        }\n\n        let observable;\n\n        if(model === null) {\n            observable = this.api.get(new this.model().getUri(), requestOptions);\n        } else {\n            observable = this.api.get(model.getUri(), requestOptions);\n        }\n\n        return observable.pipe(\n                map((response: any) => {\n                    let data = response.data;\n                    response.data = ModelFactory.makeFromArray(Models.get(this.model.key), data);\n                    return response;\n                })\n        );\n    }\n\n    getRelated(related, key, model = null, options = {}) {\n        if(model == null) {\n            model = this.model;\n        }\n\n        let constructor = Models.get(model.key);\n        model = ModelFactory.makeRelated(new constructor(), related, key);\n\n        return this.get(model);\n    }\n\n}\n"]}