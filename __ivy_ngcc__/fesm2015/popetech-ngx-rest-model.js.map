{"version":3,"file":"popetech-ngx-rest-model.js","sources":["../../../projects/ngx-rest-model/src/lib/constants.ts","../../../projects/ngx-rest-model/src/lib/http/api.service.ts","../../../projects/ngx-rest-model/src/lib/models/models.ts","../../../projects/ngx-rest-model/src/lib/models/base-model.ts","../../../projects/ngx-rest-model/src/lib/models/relationship.ts","../../../projects/ngx-rest-model/src/lib/models/model.factory.ts","../../../projects/ngx-rest-model/src/lib/http/backend.service.ts","../../../projects/ngx-rest-model/src/lib/ngx-rest-model.module.ts","../../../projects/ngx-rest-model/src/lib/models/model.interface.ts","../../../projects/ngx-rest-model/src/public_api.ts","../../../projects/ngx-rest-model/src/popetech-ngx-rest-model.ts"],"names":[],"mappings":"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","sourcesContent":["import {InjectionToken} from \"@angular/core\";\n\nexport const CONFIG = new InjectionToken('config');\n","import {Inject, Injectable} from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { take } from \"rxjs/operators\";\nimport { CONFIG } from '../constants';\n\n@Injectable()\nexport class ApiService {\n\n    private baseUrl: string;\n    private apiRoot: string;\n    private http: HttpClient;\n\n    constructor(http: HttpClient, @Inject(CONFIG) config) {\n        this.http = http;\n        const root = config.api_root;\n\n        this.setBaseUrl(root);\n        this.setApiRoot(root);\n    }\n\n    public setBaseUrl(url: string): void {\n        this.baseUrl = url;\n    }\n\n    public getBaseUrl() {\n        return this.baseUrl;\n    }\n\n    public setApiRoot(url: string): void {\n        this.apiRoot = url;\n    }\n\n    public getApiRoot() {\n        return this.apiRoot;\n    }\n\n    private getUrl(uri, bypassPrefix = false) {\n        if( ! bypassPrefix) {\n            return this.getBaseUrl() + '/' + uri;\n        }\n\n        return this.getApiRoot() + '/' + uri;\n    }\n\n    public get(uri, options = {}, bypassPrefix = false): any {\n        let url = this.getUrl(uri, bypassPrefix);\n        if(options != {}) {\n            return this.http.get(url, options).pipe(take(1));\n        }\n\n        return this.http.get(url).pipe(take(1));\n    }\n\n    public post(uri, payload, bypassPrefix = false, options = {}): any {\n\n        let url = this.getUrl(uri, bypassPrefix);\n\n        if(options != {}) {\n            return this.http.post(url, payload, options).pipe(take(1));\n        }\n\n        return this.http.post(url, payload).pipe(take(1));\n    }\n\n    public put(uri, payload, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.put(url, payload).pipe(take(1));\n    }\n\n    public delete(uri, options = {}, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.delete(url).pipe(take(1));\n    }\n}\n","export class Models {\n\n    static models = {};\n\n    static add(model) {\n        let modelName = new model().constructor.name.toLowerCase();\n        if(!Models.models[modelName]) {\n            Models.models[modelName] = model;\n        }\n    }\n\n    static get(model) {\n        return Models.models[model];\n    }\n}","import { ModelFactory } from './model.factory';\nimport { Relationship } from './relationship';\nimport { Serializable } from './serializable.interface';\nimport { Model } from './model.interface';\n\nimport { Models } from './models';\n\nexport class BaseModel implements Model, Serializable {\n\n\n     public modelConfig = {\n         key: '',\n         uri: '',\n         hidden: [],\n         relationships: {}\n    };\n\n    constructor() {}\n\n    setConfig(config) {\n        this.modelConfig = {...this.getConfig(), ...config};\n    }\n\n    getConfig() {\n        return this.modelConfig;\n    }\n\n    getUri() {\n        return this.modelConfig.uri;\n    }\n\n    getSelfUri() {\n        return this.modelConfig.uri + '/' + this[this.modelConfig.key];\n    }\n\n    setUri(uri) {\n        this.modelConfig.uri = uri;\n    }\n\n    getKey() {\n        return this.modelConfig.key;\n    }\n\n    getRelationship(key) {\n        return this.modelConfig.relationships[key];\n    }\n\n    deserialize(input) {\n\n        let config = this.getConfig();\n        let relationships = [];\n        for(let prop in input) {\n            if(! input.hasOwnProperty(prop)) {\n                continue;\n            }\n\n            if(config.hidden.indexOf(prop) > -1) {\n                continue;\n            }\n\n            if(typeof input[prop] === 'object') {\n\n                if(config.relationships.hasOwnProperty(this.snakeToCamel(prop))) {\n                    relationships.push({\n                        key: this.snakeToCamel(prop),\n                        value: (input[prop] ? input[prop].data : null)\n                    });\n                }\n\n                continue;\n            }\n\n            this[this.snakeToCamel(prop)] = input[prop];\n        }\n\n        for(let relationship of relationships) {\n\n            if(relationship.value === null) {\n                continue;\n            }\n\n            let relationshipConfig = config.relationships[relationship.key];\n\n            let related = Models.get(relationshipConfig.model);\n\n            let relationshipObject = new Relationship(this, related, relationshipConfig.type);\n\n            this[relationship.key] = ModelFactory.makeRelatedFromRelationship(relationshipObject, relationship.value);\n        }\n\n        return this;\n    }\n\n    snakeToCamel(string) {\n        return string.replace(/_\\w/g, function(m) {\n            return m[1].toUpperCase();\n        });\n    }\n}\n","import { BaseModel } from './base-model';\n\nexport class Relationship {\n\n    constructor(protected model, protected related, protected type) {}\n\n    setRelated(related) {\n        this.related = related;\n    }\n\n    getRelated() {\n        return this.related;\n    }\n\n    setModel(model) {\n        this.model = model;\n    }\n\n    create() {\n        // if the related model isn't instantiated,\n        // instantiate it here\n        if( ! (this.related instanceof BaseModel)) {\n            this.related = new this.related();\n        }\n\n        if(this.type == 'hasMany' || this.type == 'hasOne') {\n            this.related.setUri(this.model.getSelfUri() + '/' + this.related.getUri());\n            return this.related;\n        }\n\n        if(this.type == 'belongsTo') {\n            return this.related;\n        }\n    }\n\n    getModel() {\n\n    }\n\n    getUri() {\n\n    }\n}","import { Relationship } from './relationship';\nimport { Models } from \"./models\";\n\nexport class ModelFactory {\n\n    static make(model, data) {\n        return new model().deserialize(data);\n    }\n\n    static makeFromArray(model, array) {\n        let models = [];\n        for(let ii = 0; ii < array.length; ++ii) {\n            models.push(new model().deserialize(array[ii]));\n        }\n        return models;\n    }\n\n    static makeRelated(model, related, key) {\n        let relationshipConfig = model.getRelationship(key);\n\n        let relationship = new Relationship(model, related, relationshipConfig.type);\n\n        model[key] = relationship.create();\n\n        model.setUri(model[key].getSelfUri() + '/' + model.getUri());\n\n        return model;\n    }\n\n    static makeRelatedFromRelationship(relationship, input) {\n        if(relationship.type == 'hasOne' || relationship.type == 'belongsTo') {\n            return relationship.create().deserialize(input);\n        } else if(relationship.type == 'hasMany') {\n            const related = relationship.getRelated();\n            // let constructor = Models.get(related.key);\n            return ModelFactory.makeFromArray(related, input);\n        }\n\n    }\n\n}","import { Injectable } from '@angular/core';\nimport {HttpParams} from \"@angular/common/http\";\n\nimport { ApiService } from './api.service';\nimport { ModelFactory } from '../models/model.factory';\nimport { Models } from \"../models/models\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class BackendService {\n\n\n    protected model;\n\n    constructor(protected api: ApiService) {\n    }\n\n    // set model\n    setModel(model) {\n        this.model = model;\n    }\n\n    find(id) {\n        let constructor = Models.get(this.model.key);\n        return this.api.get(new constructor().getUri() + '/' + id).pipe(map((client: any) => {\n            client.data = ModelFactory.make(Models.get(this.model.key), client.data);\n            return client;\n        }));\n    }\n\n    save(data) {\n        if(data[data.getKey()]) {\n            return this.update(data);\n        }\n        return this.createNew(data);\n    }\n\n    update(data) {\n        let payload = data.serialize();\n        return this.api.put(data.getUri() + '/' + data[data.getKey()], payload);\n    }\n\n    createNew(data) {\n        let payload = data.serialize();\n        return this.api.post(data.getUri(), payload);\n    }\n\n    destroy(data) {\n        return this.api.delete(data.getUri() + '/' + data[data.getKey()]);\n    }\n\n    get(model = null, options: any = { page: 1 }) {\n\n\n        let requestOptions: any = {\n            params: new HttpParams()\n        };\n\n        if(options.page != 1) {\n            requestOptions.params = new HttpParams().set('page', String(options.page));\n        }\n\n        let observable;\n\n        if(model === null) {\n            observable = this.api.get(new this.model().getUri(), requestOptions);\n        } else {\n            observable = this.api.get(model.getUri(), requestOptions);\n        }\n\n        return observable.pipe(\n                map((response: any) => {\n                    let data = response.data;\n                    response.data = ModelFactory.makeFromArray(Models.get(this.model.key), data);\n                    return response;\n                })\n        );\n    }\n\n    getRelated(related, key, model = null, options = {}) {\n        if(model == null) {\n            model = this.model;\n        }\n\n        let constructor = Models.get(model.key);\n        model = ModelFactory.makeRelated(new constructor(), related, key);\n\n        return this.get(model);\n    }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport { ApiService } from \"./http/api.service\";\nimport { BackendService } from \"./http/backend.service\";\nimport {CONFIG} from \"./constants\";\n\n@NgModule({\n    imports: [],\n    declarations: [],\n    exports: [],\n    providers:\n    [\n        ApiService,\n        BackendService\n    ]\n})\nexport class NgxRestModelModule {\n    public static forRoot(config): ModuleWithProviders<NgxRestModelModule> {\n        return {\n            ngModule: NgxRestModelModule,\n            providers: [{ provide: CONFIG, useValue: config}]\n        };\n    }\n}\n","export interface ModelConfig {\n    key;\n    uri;\n    hidden?;\n    relationships?;\n};\n\nexport interface Model {\n    modelConfig: ModelConfig;\n}","/*\n * Public API Surface of ngx-rest-model\n */\nexport * from './lib/ngx-rest-model.module';\nexport * from './lib/models/model.interface';\nexport * from './lib/models/serializable.interface';\nexport * from './lib/models/base-model';\nexport * from './lib/models/relationship';\n\nexport * from './lib/http/api.service';\nexport * from './lib/http/backend.service';\n\nexport * from './lib/models/models';\nexport * from './lib/models/model.factory';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {CONFIG as ɵa} from './lib/constants';"]}