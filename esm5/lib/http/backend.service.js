import { Injectable } from '@angular/core';
import { HttpParams } from "@angular/common/http";
import { ApiService } from './api.service';
import { ModelFactory } from '../models/model.factory';
import { Models } from "../models/models";
import { map } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "./api.service";
var BackendService = /** @class */ (function () {
    function BackendService(api) {
        this.api = api;
    }
    // set model
    BackendService.prototype.setModel = function (model) {
        this.model = model;
    };
    BackendService.prototype.find = function (id) {
        var _this = this;
        var constructor = Models.get(this.model.key);
        return this.api.get(new constructor().getUri() + '/' + id).pipe(map(function (client) {
            client.data = ModelFactory.make(Models.get(_this.model.key), client.data);
            return client;
        }));
    };
    BackendService.prototype.save = function (data) {
        if (data[data.getKey()]) {
            return this.update(data);
        }
        return this.createNew(data);
    };
    BackendService.prototype.update = function (data) {
        var payload = data.serialize();
        return this.api.put(data.getUri() + '/' + data[data.getKey()], payload);
    };
    BackendService.prototype.createNew = function (data) {
        var payload = data.serialize();
        return this.api.post(data.getUri(), payload);
    };
    BackendService.prototype.destroy = function (data) {
        return this.api.delete(data.getUri() + '/' + data[data.getKey()]);
    };
    BackendService.prototype.get = function (model, options) {
        var _this = this;
        if (model === void 0) { model = null; }
        if (options === void 0) { options = { page: 1 }; }
        var requestOptions = {
            params: new HttpParams()
        };
        if (options.page != 1) {
            requestOptions.params = new HttpParams().set('page', String(options.page));
        }
        var observable;
        if (model === null) {
            observable = this.api.get(new this.model().getUri(), requestOptions);
        }
        else {
            observable = this.api.get(model.getUri(), requestOptions);
        }
        return observable.pipe(map(function (response) {
            var data = response.data;
            response.data = ModelFactory.makeFromArray(Models.get(_this.model.key), data);
            return response;
        }));
    };
    BackendService.prototype.getRelated = function (related, key, model, options) {
        if (model === void 0) { model = null; }
        if (options === void 0) { options = {}; }
        if (model == null) {
            model = this.model;
        }
        var constructor = Models.get(model.key);
        model = ModelFactory.makeRelated(new constructor(), related, key);
        return this.get(model);
    };
    BackendService.ɵfac = function BackendService_Factory(t) { return new (t || BackendService)(i0.ɵɵinject(i1.ApiService)); };
    BackendService.ɵprov = i0.ɵɵdefineInjectable({ token: BackendService, factory: BackendService.ɵfac });
    return BackendService;
}());
export { BackendService };
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(BackendService, [{
        type: Injectable
    }], function () { return [{ type: i1.ApiService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcGV0ZWNoL25neC1yZXN0LW1vZGVsLyIsInNvdXJjZXMiOlsibGliL2h0dHAvYmFja2VuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUdyQztJQU1JLHdCQUFzQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUNyQyxDQUFDO0lBRUQsWUFBWTtJQUNaLGlDQUFRLEdBQVIsVUFBUyxLQUFLO1FBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELDZCQUFJLEdBQUosVUFBSyxFQUFFO1FBQVAsaUJBTUM7UUFMRyxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBVztZQUM1RSxNQUFNLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FB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Q0FBQztTQUN0QjtRQUVELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWxFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO2dGQS9FUSxjQUFjOzBEQUFkLGNBQWMsV0FBZCxjQUFjO3lCQVYzQjtDQTJGQyxBQWxGRCxJQWtGQztTQWpGWSxjQUFjO2tEQUFkLGNBQWM7Y0FEMUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cFBhcmFtc30gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5cbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IE1vZGVsRmFjdG9yeSB9IGZyb20gJy4uL21vZGVscy9tb2RlbC5mYWN0b3J5JztcbmltcG9ydCB7IE1vZGVscyB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFja2VuZFNlcnZpY2Uge1xuXG5cbiAgICBwcm90ZWN0ZWQgbW9kZWw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYXBpOiBBcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLy8gc2V0IG1vZGVsXG4gICAgc2V0TW9kZWwobW9kZWwpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgIH1cblxuICAgIGZpbmQoaWQpIHtcbiAgICAgICAgbGV0IGNvbnN0cnVjdG9yID0gTW9kZWxzLmdldCh0aGlzLm1vZGVsLmtleSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5nZXQobmV3IGNvbnN0cnVjdG9yKCkuZ2V0VXJpKCkgKyAnLycgKyBpZCkucGlwZShtYXAoKGNsaWVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBjbGllbnQuZGF0YSA9IE1vZGVsRmFjdG9yeS5tYWtlKE1vZGVscy5nZXQodGhpcy5tb2RlbC5rZXkpLCBjbGllbnQuZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgc2F2ZShkYXRhKSB7XG4gICAgICAgIGlmKGRhdGFbZGF0YS5nZXRLZXkoKV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVOZXcoZGF0YSk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBkYXRhLnNlcmlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkucHV0KGRhdGEuZ2V0VXJpKCkgKyAnLycgKyBkYXRhW2RhdGEuZ2V0S2V5KCldLCBwYXlsb2FkKTtcbiAgICB9XG5cbiAgICBjcmVhdGVOZXcoZGF0YSkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IGRhdGEuc2VyaWFsaXplKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5wb3N0KGRhdGEuZ2V0VXJpKCksIHBheWxvYWQpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuZGVsZXRlKGRhdGEuZ2V0VXJpKCkgKyAnLycgKyBkYXRhW2RhdGEuZ2V0S2V5KCldKTtcbiAgICB9XG5cbiAgICBnZXQobW9kZWwgPSBudWxsLCBvcHRpb25zOiBhbnkgPSB7IHBhZ2U6IDEgfSkge1xuXG5cbiAgICAgICAgbGV0IHJlcXVlc3RPcHRpb25zOiBhbnkgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IG5ldyBIdHRwUGFyYW1zKClcbiAgICAgICAgfTtcblxuICAgICAgICBpZihvcHRpb25zLnBhZ2UgIT0gMSkge1xuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMucGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKS5zZXQoJ3BhZ2UnLCBTdHJpbmcob3B0aW9ucy5wYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2JzZXJ2YWJsZTtcblxuICAgICAgICBpZihtb2RlbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IHRoaXMuYXBpLmdldChuZXcgdGhpcy5tb2RlbCgpLmdldFVyaSgpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gdGhpcy5hcGkuZ2V0KG1vZGVsLmdldFVyaSgpLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSBNb2RlbEZhY3RvcnkubWFrZUZyb21BcnJheShNb2RlbHMuZ2V0KHRoaXMubW9kZWwua2V5KSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFJlbGF0ZWQocmVsYXRlZCwga2V5LCBtb2RlbCA9IG51bGwsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZihtb2RlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBtb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29uc3RydWN0b3IgPSBNb2RlbHMuZ2V0KG1vZGVsLmtleSk7XG4gICAgICAgIG1vZGVsID0gTW9kZWxGYWN0b3J5Lm1ha2VSZWxhdGVkKG5ldyBjb25zdHJ1Y3RvcigpLCByZWxhdGVkLCBrZXkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldChtb2RlbCk7XG4gICAgfVxuXG59XG4iXX0=