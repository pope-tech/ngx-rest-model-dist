{"version":3,"file":"popetech-ngx-rest-model.js","sources":["ng://@popetech/ngx-rest-model/lib/constants.ts","ng://@popetech/ngx-rest-model/lib/http/api.service.ts","ng://@popetech/ngx-rest-model/lib/models/models.ts","ng://@popetech/ngx-rest-model/lib/models/base-model.ts","ng://@popetech/ngx-rest-model/lib/models/relationship.ts","ng://@popetech/ngx-rest-model/lib/models/model.factory.ts","ng://@popetech/ngx-rest-model/lib/http/backend.service.ts","ng://@popetech/ngx-rest-model/lib/ngx-rest-model.module.ts"],"sourcesContent":["import {InjectionToken} from \"@angular/core\";\n\nexport const CONFIG = new InjectionToken('config');\n","import {Inject, Injectable} from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { take } from \"rxjs/operators\";\nimport { CONFIG } from '../constants';\n\n@Injectable()\nexport class ApiService {\n\n    private baseUrl: string;\n    private apiRoot: string;\n    private http: HttpClient;\n\n    constructor(http: HttpClient, @Inject(CONFIG) config) {\n        this.http = http;\n        const root = config.api_root;\n\n        this.setBaseUrl(root);\n        this.setApiRoot(root);\n    }\n\n    public setBaseUrl(url: string): void {\n        this.baseUrl = url;\n    }\n\n    public getBaseUrl() {\n        return this.baseUrl;\n    }\n\n    public setApiRoot(url: string): void {\n        this.apiRoot = url;\n    }\n\n    public getApiRoot() {\n        return this.apiRoot;\n    }\n\n    private getUrl(uri, bypassPrefix = false) {\n        if( ! bypassPrefix) {\n            return this.getBaseUrl() + '/' + uri;\n        }\n\n        return this.getApiRoot() + '/' + uri;\n    }\n\n    public get(uri, options = {}, bypassPrefix = false): any {\n        let url = this.getUrl(uri, bypassPrefix);\n        if(options != {}) {\n            return this.http.get(url, options).pipe(take(1));\n        }\n\n        return this.http.get(url).pipe(take(1));\n    }\n\n    public post(uri, payload, bypassPrefix = false, options = {}): any {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        if(options != {}) {\n            return this.http.post(url, payload, options).pipe(take(1));\n        }\n\n        return this.http.post(url, payload).pipe(take(1));\n    }\n\n    public put(uri, payload, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.put(url, payload).pipe(take(1));\n    }\n\n    public delete(uri, options = {}, bypassPrefix = false) {\n        let url = this.getUrl(uri, bypassPrefix);\n\n        return this.http.delete(url).pipe(take(1));\n    }\n}\n","export class Models {\n\n    static models = {};\n\n    static add(model) {\n        let modelName = new model().constructor.name.toLowerCase();\n        if(!Models.models[modelName]) {\n            Models.models[modelName] = model;\n        }\n    }\n\n    static get(model) {\n        return Models.models[model];\n    }\n}","import { ModelFactory } from './model.factory';\nimport { Relationship } from './relationship';\nimport { Serializable } from './serializable.interface';\nimport { Model } from './model.interface';\n\nimport { Models } from './models';\n\nexport class BaseModel implements Model, Serializable {\n\n\n     public modelConfig = {\n         key: '',\n         uri: '',\n         hidden: [],\n         relationships: {}\n    };\n\n    constructor() {}\n\n    setConfig(config) {\n        this.modelConfig = {...this.getConfig(), ...config};\n    }\n\n    getConfig() {\n        return this.modelConfig;\n    }\n\n    getUri() {\n        return this.modelConfig.uri;\n    }\n\n    getSelfUri() {\n        return this.modelConfig.uri + '/' + this[this.modelConfig.key];\n    }\n\n    setUri(uri) {\n        this.modelConfig.uri = uri;\n    }\n\n    getKey() {\n        return this.modelConfig.key;\n    }\n\n    getRelationship(key) {\n        return this.modelConfig.relationships[key];\n    }\n\n    deserialize(input) {\n\n        let config = this.getConfig();\n        let relationships = [];\n        for(let prop in input) {\n            if(! input.hasOwnProperty(prop)) {\n                continue;\n            }\n\n            if(config.hidden.indexOf(prop) > -1) {\n                continue;\n            }\n\n            if(typeof input[prop] === 'object') {\n\n                if(config.relationships.hasOwnProperty(this.snakeToCamel(prop))) {\n                    relationships.push({\n                        key: this.snakeToCamel(prop),\n                        value: (input[prop] ? input[prop].data : null)\n                    });\n                }\n\n                continue;\n            }\n\n            this[this.snakeToCamel(prop)] = input[prop];\n        }\n\n        for(let relationship of relationships) {\n\n            if(relationship.value === null) {\n                continue;\n            }\n\n            let relationshipConfig = config.relationships[relationship.key];\n\n            let related = Models.get(relationshipConfig.model);\n\n            let relationshipObject = new Relationship(this, related, relationshipConfig.type);\n\n            this[relationship.key] = ModelFactory.makeRelatedFromRelationship(relationshipObject, relationship.value);\n        }\n\n        return this;\n    }\n\n    snakeToCamel(string) {\n        return string.replace(/_\\w/g, function(m) {\n            return m[1].toUpperCase();\n        });\n    }\n}\n","import { BaseModel } from './base-model';\n\nexport class Relationship {\n\n    constructor(protected model, protected related, protected type) {}\n\n    setRelated(related) {\n        this.related = related;\n    }\n\n    getRelated() {\n        return this.related;\n    }\n\n    setModel(model) {\n        this.model = model;\n    }\n\n    create() {\n        // if the related model isn't instantiated,\n        // instantiate it here\n        if( ! (this.related instanceof BaseModel)) {\n            this.related = new this.related();\n        }\n\n        if(this.type == 'hasMany' || this.type == 'hasOne') {\n            this.related.setUri(this.model.getSelfUri() + '/' + this.related.getUri());\n            return this.related;\n        }\n\n        if(this.type == 'belongsTo') {\n            return this.related;\n        }\n    }\n\n    getModel() {\n\n    }\n\n    getUri() {\n\n    }\n}","import { Relationship } from './relationship';\nimport { Models } from \"./models\";\n\nexport class ModelFactory {\n\n    static make(model, data) {\n        return new model().deserialize(data);\n    }\n\n    static makeFromArray(model, array) {\n        let models = [];\n        for(let ii = 0; ii < array.length; ++ii) {\n            models.push(new model().deserialize(array[ii]));\n        }\n        return models;\n    }\n\n    static makeRelated(model, related, key) {\n        let relationshipConfig = model.getRelationship(key);\n\n        let relationship = new Relationship(model, related, relationshipConfig.type);\n\n        model[key] = relationship.create();\n\n        model.setUri(model[key].getSelfUri() + '/' + model.getUri());\n\n        return model;\n    }\n\n    static makeRelatedFromRelationship(relationship, input) {\n        if(relationship.type == 'hasOne' || relationship.type == 'belongsTo') {\n            return relationship.create().deserialize(input);\n        } else if(relationship.type == 'hasMany') {\n            const related = relationship.getRelated();\n            // let constructor = Models.get(related.key);\n            return ModelFactory.makeFromArray(related, input);\n        }\n\n    }\n\n}","import { Injectable } from '@angular/core';\nimport {HttpParams} from \"@angular/common/http\";\n\nimport { ApiService } from './api.service';\nimport { ModelFactory } from '../models/model.factory';\nimport { Models } from \"../models/models\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class BackendService {\n\n\n    protected model;\n\n    constructor(protected api: ApiService) {\n    }\n\n    // set model\n    setModel(model) {\n        this.model = model;\n    }\n\n    find(id) {\n        let constructor = Models.get(this.model.key);\n        return this.api.get(new constructor().getUri() + '/' + id).pipe(map((client: any) => {\n            client.data = ModelFactory.make(Models.get(this.model.key), client.data);\n            return client;\n        }));\n    }\n\n    save(data) {\n        if(data[data.getKey()]) {\n            return this.update(data);\n        }\n        return this.createNew(data);\n    }\n\n    update(data) {\n        let payload = data.serialize();\n        return this.api.put(data.getUri() + '/' + data[data.getKey()], payload);\n    }\n\n    createNew(data) {\n        let payload = data.serialize();\n        return this.api.post(data.getUri(), payload);\n    }\n\n    destroy(data) {\n        return this.api.delete(data.getUri() + '/' + data[data.getKey()]);\n    }\n\n    get(model = null, options: any = { page: 1 }) {\n\n\n        let requestOptions: any = {\n            params: new HttpParams()\n        };\n\n        if(options.page != 1) {\n            requestOptions.params = new HttpParams().set('page', String(options.page));\n        }\n\n        let observable;\n\n        if(model === null) {\n            observable = this.api.get(new this.model().getUri(), requestOptions);\n        } else {\n            observable = this.api.get(model.getUri(), requestOptions);\n        }\n\n        return observable.pipe(\n                map((response: any) => {\n                    let data = response.data;\n                    response.data = ModelFactory.makeFromArray(Models.get(this.model.key), data);\n                    return response;\n                })\n        );\n    }\n\n    getRelated(related, key, model = null, options = {}) {\n        if(model == null) {\n            model = this.model;\n        }\n\n        let constructor = Models.get(model.key);\n        model = ModelFactory.makeRelated(new constructor(), related, key);\n\n        return this.get(model);\n    }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport { ApiService } from \"./http/api.service\";\nimport { BackendService } from \"./http/backend.service\";\nimport {CONFIG} from \"./constants\";\n\n@NgModule({\n    imports: [],\n    declarations: [],\n    exports: [],\n    providers:\n    [\n        ApiService,\n        BackendService\n    ]\n})\nexport class NgxRestModelModule {\n    public static forRoot(config): ModuleWithProviders {\n        return {\n            ngModule: NgxRestModelModule,\n            providers: [{ provide: CONFIG, useValue: config}]\n        };\n    }\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}